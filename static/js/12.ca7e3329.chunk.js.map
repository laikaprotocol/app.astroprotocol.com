{"version":3,"sources":["hooks/useTokenBalance.ts","hooks/useBlock.ts","../node_modules/lodash/orderBy.js","../node_modules/lodash/_baseOrderBy.js","../node_modules/lodash/_baseMap.js","../node_modules/lodash/_baseSortBy.js","../node_modules/lodash/_compareMultiple.js","../node_modules/lodash/_compareAscending.js","views/Nft/components/InfoRow.tsx","views/Nft/components/Image.tsx","views/Nft/utils/contracts.ts","views/Nft/contexts/NftProvider.tsx","views/Nft/components/ClaimNftModal.tsx","views/Nft/components/BurnNftModal.tsx","views/Nft/components/TransferNftModal.tsx","views/Nft/components/NftCard/index.tsx","views/Nft/components/NftGrid.tsx","views/Nft/components/NftList.tsx","views/Nft/index.tsx"],"names":["useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","useEffect","a","cakeContract","getContract","cakeABI","getCakeAddress","methods","call","supply","BigNumber","fetchTotalSupply","useBurnedBalance","tokenAddress","balance","setBalance","balanceOf","bal","fetchBalance","useTokenBalance","useWallet","account","ethereum","fastRefresh","getTokenBalance","res","useBlock","useContext","BlockContext","baseOrderBy","require","isArray","module","exports","collection","iteratees","orders","guard","undefined","arrayMap","baseGet","baseIteratee","baseMap","baseSortBy","baseUnary","compareMultiple","identity","length","iteratee","value","index","result","key","object","other","baseEach","isArrayLike","Array","array","comparer","sort","compareAscending","objCriteria","criteria","othCriteria","ordersLength","isSymbol","valIsDefined","valIsNull","valIsReflexive","valIsSymbol","othIsDefined","othIsNull","othIsReflexive","othIsSymbol","InfoRow","styled","div","Container","theme","colors","borderColor","StyledImage","img","Image","src","alt","originalLink","previewImage","href","target","rel","getPancakeRabbitContract","contractOptions","pancakeRabbitsAbi","pancakeRabbits","PANCAKE_RABBITS_ADDRESS","NftProviderContext","createContext","NftProvider","children","isMounted","useRef","isInitialized","canClaim","hasClaimed","countBunniesBurnt","startBlockNumber","endBlockNumber","totalSupplyDistributed","currentDistributedSupply","bunnyMap","state","setState","currentBlock","multicall","rabbitmintingfarm","address","RABBIT_MINTING_FARM_ADDRESS","name","startBlockNumberArr","endBlockNumberArr","countBunniesBurntArr","totalSupplyDistributedArr","currentDistributedSupplyArr","prevState","toNumber","console","error","fetchContractData","pancakeRabbitsContract","params","canClaimArr","hasClaimedArr","getTokenIdAndBunnyId","tokenOfOwnerByIndex","tokenId","getBunnyId","bunnyId","parseInt","tokenIdPromises","i","push","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","current","canBurnNft","Provider","getTokenIds","reInitialize","Value","Text","ModalContent","Actions","ClaimNftModal","nft","onSuccess","onDismiss","isLoading","setIsLoading","setError","TranslateString","useI18n","rabbitMintingContract","useRabbitMintingFarm","cakeBalance","cakeInWallet","getBalanceNumber","handleConfirm","mintNFT","send","from","on","title","color","mb","fullWidth","variant","onClick","disabled","BurnNftModal","tokenIds","accepted","setAccepted","burnNFT","style","alignItems","display","checked","scale","onChange","ml","cursor","Label","label","text","TransferNftModal","setValue","usePancakeRabbits","Web3","utils","isAddress","transferFrom","htmlFor","id","type","placeholder","evt","inputValue","isWarning","Header","DetailsButton","Button","attrs","InfoBlock","NftCard","isOpen","bunnyCount","bunnyBurnCount","walletCanClaim","originalImage","description","isSupplyAvailable","walletOwnsNft","Icon","ChevronUpIcon","ChevronDownIcon","fetchDetails","useCallback","isDataFetched","handleClick","handleSuccess","useModal","onPresentClaimModal","onPresentBurnModal","onPresentTransferModal","isActive","outline","mt","p","endIcon","width","as","textAlign","NftGrid","BaseLayout","mediaQueries","sm","NftList","orderBy","nfts","map","StyledHero","textSubtle","Nft","Page","size"],"mappings":"4SA6BaA,EAAiB,WAAO,IAC3BC,EAAgBC,cAAhBD,YAD0B,EAEIE,qBAFJ,mBAE3BC,EAF2B,KAEdC,EAFc,KAclC,OAVAC,qBAAU,WAAM,4CACd,8BAAAC,EAAA,6DACQC,EAAeC,YAAYC,EAASC,eAD5C,SAEuBH,EAAaI,QAAQR,cAAcS,OAF1D,OAEQC,EAFR,OAGET,EAAe,IAAIU,IAAUD,IAH/B,4CADc,uBAAC,WAAD,wBAOdE,KACC,CAACf,IAEGG,GAGIa,EAAmB,SAACC,GAA0B,IAAD,EAC1Bf,mBAAS,IAAIY,IAAU,IADG,mBACjDI,EADiD,KACxCC,EADwC,KAEhDnB,EAAgBC,cAAhBD,YAYR,OAVAK,qBAAU,YACU,uCAAG,8BAAAC,EAAA,6DACbC,EAAeC,YAAYC,EAASC,eADvB,SAEDH,EAAaI,QAAQS,UAAU,8CAA8CR,OAF5E,OAEbS,EAFa,OAGnBF,EAAW,IAAIL,IAAUO,IAHN,2CAAH,qDAMlBC,KACC,CAACL,EAAcjB,IAEXkB,GAGMK,IArDS,SAACN,GAA0B,IAAD,EAClBf,mBAAS,IAAIY,IAAU,IADL,mBACzCI,EADyC,KAChCC,EADgC,OAEuBK,cAA/DC,EAFwC,EAExCA,QAASC,EAF+B,EAE/BA,SACTC,EAAgB1B,cAAhB0B,YAaR,OAXAtB,qBAAU,WAMJoB,GAAWC,GALG,uCAAG,4BAAApB,EAAA,sEACDsB,YAAgBF,EAAUT,EAAcQ,GADvC,OACbI,EADa,OAEnBV,EAAW,IAAIL,IAAUe,IAFN,2CAAH,oDAMhBP,KAED,CAACG,EAASC,EAAUT,EAAcU,IAE9BT,I,iCC1BT,oBAQeY,IALE,WAEf,OADsBC,qBAAWC,O,oBCJnC,IAAIC,EAAcC,EAAQ,KACtBC,EAAUD,EAAQ,KA6CtBE,EAAOC,QAdP,SAAiBC,EAAYC,EAAWC,EAAQC,GAC9C,OAAkB,MAAdH,EACK,IAEJH,EAAQI,KACXA,EAAyB,MAAbA,EAAoB,GAAK,CAACA,IAGnCJ,EADLK,EAASC,OAAQC,EAAYF,KAE3BA,EAAmB,MAAVA,EAAiB,GAAK,CAACA,IAE3BP,EAAYK,EAAYC,EAAWC,M,oBC3C5C,IAAIG,EAAWT,EAAQ,KACnBU,EAAUV,EAAQ,KAClBW,EAAeX,EAAQ,KACvBY,EAAUZ,EAAQ,KAClBa,EAAab,EAAQ,KACrBc,EAAYd,EAAQ,KACpBe,EAAkBf,EAAQ,KAC1BgB,EAAWhB,EAAQ,KACnBC,EAAUD,EAAQ,KAwCtBE,EAAOC,QA7BP,SAAqBC,EAAYC,EAAWC,GAExCD,EADEA,EAAUY,OACAR,EAASJ,GAAW,SAASa,GACvC,OAAIjB,EAAQiB,GACH,SAASC,GACd,OAAOT,EAAQS,EAA2B,IAApBD,EAASD,OAAeC,EAAS,GAAKA,IAGzDA,KAGG,CAACF,GAGf,IAAII,GAAS,EACbf,EAAYI,EAASJ,EAAWS,EAAUH,IAE1C,IAAIU,EAAST,EAAQR,GAAY,SAASe,EAAOG,EAAKlB,GAIpD,MAAO,CAAE,SAHMK,EAASJ,GAAW,SAASa,GAC1C,OAAOA,EAASC,MAEa,QAAWC,EAAO,MAASD,MAG5D,OAAON,EAAWQ,GAAQ,SAASE,EAAQC,GACzC,OAAOT,EAAgBQ,EAAQC,EAAOlB,Q,oBC5C1C,IAAImB,EAAWzB,EAAQ,KACnB0B,EAAc1B,EAAQ,KAoB1BE,EAAOC,QAVP,SAAiBC,EAAYc,GAC3B,IAAIE,GAAS,EACTC,EAASK,EAAYtB,GAAcuB,MAAMvB,EAAWa,QAAU,GAKlE,OAHAQ,EAASrB,GAAY,SAASe,EAAOG,EAAKlB,GACxCiB,IAASD,GAASF,EAASC,EAAOG,EAAKlB,MAElCiB,I,kBCETnB,EAAOC,QAVP,SAAoByB,EAAOC,GACzB,IAAIZ,EAASW,EAAMX,OAGnB,IADAW,EAAME,KAAKD,GACJZ,KACLW,EAAMX,GAAUW,EAAMX,GAAQE,MAEhC,OAAOS,I,oBCjBT,IAAIG,EAAmB/B,EAAQ,KA2C/BE,EAAOC,QA3BP,SAAyBoB,EAAQC,EAAOlB,GAOtC,IANA,IAAIc,GAAS,EACTY,EAAcT,EAAOU,SACrBC,EAAcV,EAAMS,SACpBhB,EAASe,EAAYf,OACrBkB,EAAe7B,EAAOW,SAEjBG,EAAQH,GAAQ,CACvB,IAAII,EAASU,EAAiBC,EAAYZ,GAAQc,EAAYd,IAC9D,GAAIC,EACF,OAAID,GAASe,EACJd,EAGFA,GAAmB,QADdf,EAAOc,IACiB,EAAI,GAU5C,OAAOG,EAAOH,MAAQI,EAAMJ,Q,oBCxC9B,IAAIgB,EAAWpC,EAAQ,KAwCvBE,EAAOC,QA9BP,SAA0BgB,EAAOK,GAC/B,GAAIL,IAAUK,EAAO,CACnB,IAAIa,OAAyB7B,IAAVW,EACfmB,EAAsB,OAAVnB,EACZoB,EAAiBpB,IAAUA,EAC3BqB,EAAcJ,EAASjB,GAEvBsB,OAAyBjC,IAAVgB,EACfkB,EAAsB,OAAVlB,EACZmB,EAAiBnB,IAAUA,EAC3BoB,EAAcR,EAASZ,GAE3B,IAAMkB,IAAcE,IAAgBJ,GAAerB,EAAQK,GACtDgB,GAAeC,GAAgBE,IAAmBD,IAAcE,GAChEN,GAAaG,GAAgBE,IAC5BN,GAAgBM,IACjBJ,EACH,OAAO,EAET,IAAMD,IAAcE,IAAgBI,GAAezB,EAAQK,GACtDoB,GAAeP,GAAgBE,IAAmBD,IAAcE,GAChEE,GAAaL,GAAgBE,IAC5BE,GAAgBF,IACjBI,EACH,OAAQ,EAGZ,OAAO,I,0TCnCT,IAMeE,EANCC,IAAOC,IAAV,K,qaCOb,IAAMC,EAAYF,IAAOC,IAAV,KACO,qBAAGE,MAAkBC,OAAOC,eAO5CC,EAAcN,IAAOO,IAAV,KA2BFC,EAhBqB,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,IAAKC,EAAwB,EAAxBA,IAAKC,EAAmB,EAAnBA,aACzCC,EAAe,cAACN,EAAD,CAAaG,IAAKA,EAAKC,IAAKA,IAEjD,OACE,cAACR,EAAD,UACGS,EACC,mBAAGE,KAAMF,EAAcG,OAAO,SAASC,IAAI,sBAA3C,SACGH,IAGHA,K,mECxBKI,EAA2B,SAACC,GACvC,IAAMC,EAAqBC,EAC3B,OAAO3F,YAAY0F,EAAmBE,IAAyBH,ICoBpDI,EAAqBC,wBAA8B,MAmKjDC,EAjKiC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC3CC,EAAYC,kBAAO,GADuC,EAEtCxG,mBAAgB,CACxCyG,eAAe,EACfC,UAAU,EACVC,YAAY,EACZC,kBAAmB,EACnBC,iBAAkB,EAClBC,eAAgB,EAChBC,uBAAwB,EACxBC,yBAA0B,EAC1B9F,UAAW,EACX+F,SAAU,KAZoD,mBAEzDC,EAFyD,KAElDC,EAFkD,KAcxD5F,EAAYD,cAAZC,QACF6F,EAAexF,cAEb6E,EAAkBS,EAAlBT,cAGRtG,qBAAU,YACe,uCAAG,4DAAAC,EAAA,+EAQZiH,YAAUC,EAAmB,CACrC,CAAEC,QAASC,IAA6BC,KAAM,oBAC9C,CAAEF,QAASC,IAA6BC,KAAM,kBAC9C,CAAEF,QAASC,IAA6BC,KAAM,qBAC9C,CAAEF,QAASC,IAA6BC,KAAM,0BAC9C,CAAEF,QAASC,IAA6BC,KAAM,8BAb1B,mCAGpBC,EAHoB,KAIpBC,EAJoB,KAKpBC,EALoB,KAMpBC,EANoB,KAOpBC,EAPoB,mBAiBkBJ,EAjBlB,GAiBfb,EAjBe,mBAkBgBc,EAlBhB,GAkBfb,EAlBe,mBAmBmBc,EAnBnB,GAmBfhB,EAnBe,mBAoBwBiB,EApBxB,GAoBfd,EApBe,mBAqB0Be,EArB1B,GAqBfd,EArBe,KAuBtBG,GAAS,SAACY,GAAD,mBAAC,eACLA,GADI,IAEPtB,eAAe,EACfG,kBAAmBA,EAAkBoB,WACrCnB,iBAAkBA,EAAiBmB,WACnClB,eAAgBA,EAAekB,WAC/BhB,yBAA0BA,EAAyBgB,WACnDjB,uBAAwBA,EAAuBiB,gBA9B3B,kDAiCtBC,QAAQC,MAAM,mBAAd,MAjCsB,0DAAH,qDAqCvBC,KACC,CAAC1B,EAAeU,IAGnBhH,qBAAU,WAiEJoB,GAhEmB,uCAAG,wDAAAnB,EAAA,sEAEhBgI,EAAyBtC,IAFT,SAGqBuB,YAAUC,EAAmB,CACtE,CAAEC,QAASC,IAA6BC,KAAM,WAAYY,OAAQ,CAAC9G,IACnE,CAAEgG,QAASC,IAA6BC,KAAM,aAAcY,OAAQ,CAAC9G,MALjD,0CAGf+G,EAHe,KAGFC,EAHE,eAOEH,EAAuB3H,QAAQS,UAAUK,GAASb,OAPpD,WAOhBQ,EAPgB,qBAQQoH,EARR,GAQf5B,EARe,mBASU6B,EATV,GASf5B,EATe,KAWlBM,EAAqB,KAIrB/F,EAAY,GAfM,iBA6BpB,IAbMsH,EAhBc,+BAAApI,EAAA,MAgBS,WAAOgD,GAAP,iBAAAhD,EAAA,+EAEHgI,EAAuB3H,QAAQgI,oBAAoBlH,EAAS6B,GAAO1C,OAFhE,cAEnBgI,EAFmB,gBAGHN,EAAuB3H,QAAQkI,WAAWD,GAAShI,OAHhD,cAGnBkI,EAHmB,yBAKlB,CAACC,SAASD,EAAS,IAAKC,SAASH,EAAS,MALxB,2DAOlB,MAPkB,0DAhBT,sDA2BdI,EAAkB,GAEfC,EAAI,EAAGA,EAAI7H,EAAW6H,IAC7BD,EAAgBE,KAAKR,EAAqBO,IA9BxB,iBAiCgBE,QAAQC,IAAIJ,GAjC5B,QAiCdK,EAjCc,OAqCpBlC,EAAWkC,EAAsBC,QAAO,SAACC,EAAOC,GAC9C,IAAKA,EACH,OAAOD,EAFqD,kBAKnCC,EALmC,GAKvDV,EALuD,KAK9CF,EAL8C,KAO9D,OAAO,2BACFW,GADL,kBAEGT,EAAUS,EAAMT,GAAN,sBAAqBS,EAAMT,IAA3B,CAAqCF,IAAW,CAACA,OAE7D,IAhDiB,QAmDtBvB,GAAS,SAACY,GAAD,mBAAC,eACLA,GADI,IAEPtB,eAAe,EACfC,WACAC,aACAzF,YACA+F,gBAzDoB,kDA4DtBgB,QAAQC,MAAM,mBAAd,MA5DsB,0DAAH,oDAiErBC,KAED,CAAC1B,EAAelF,EAAS4F,IAE5BhH,qBAAU,WACR,OAAO,WACLoG,EAAUgD,SAAU,KAErB,CAAChD,IAEJ,IAAMiD,EAAapC,GAAgBF,EAAMJ,eAgBzC,OACE,cAACX,EAAmBsD,SAApB,CAA6BtG,MAAK,2BAAO+D,GAAP,IAAcsC,aAAYE,YAhB1C,SAACd,GAAD,OAAqB1B,EAAMD,SAAS2B,IAgBmBe,aAVtD,WAIfpD,EAAUgD,SACZpC,GAAS,SAACY,GAAD,mBAAC,eAAoBA,GAArB,IAAgCtB,eAAe,UAK1D,SACGH,K,mXC/KP,IAAMsD,EAAQ9E,YAAO+E,IAAP/E,CAAH,KAILgF,EAAehF,IAAOC,IAAV,KAIZgF,EAAUjF,IAAOC,IAAV,KAoEEiF,EA9DqC,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,IAAKC,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UAAgB,EACnDnK,oBAAS,GAD0C,mBAC9EoK,EAD8E,KACnEC,EADmE,OAE3DrK,mBAAS,MAFkD,mBAE9EkI,EAF8E,KAEvEoC,EAFuE,KAG/EC,EAAkBC,cAChBjJ,EAAYD,cAAZC,QACFkJ,EAAwBC,YAAqBlD,KAC7CmD,EAActJ,YAAgBb,eAC9BoK,EAAeC,YAAiBF,GAEhCG,EAAa,uCAAG,sBAAA1K,EAAA,+EAEZqK,EAAsBhK,QACzBsK,QAAQd,EAAIrB,SACZoC,KAAK,CAAEC,KAAM1J,IACb2J,GAAG,WAAW,WACbb,GAAa,MAEda,GAAG,WAAW,WACbf,IACAD,OAEDgB,GAAG,SAAS,WACXjD,QAAQC,MAAMA,GACdoC,EAAS,uBACTD,GAAa,MAfC,sDAkBlBpC,QAAQC,MAAM,sBAAd,MAlBkB,wDAAH,qDA4BnB,OANA/H,qBAAU,WACa,IAAjByK,GACFN,EAAS,iEAEV,CAACM,EAAcN,IAGhB,eAAC,IAAD,CAAOa,MAAOZ,EAAgB,IAAK,aAAcJ,UAAWA,EAA5D,UACE,eAACL,EAAD,WACG5B,GACC,cAAC,IAAD,CAAMkD,MAAM,UAAUC,GAAG,MAAzB,SACGnD,IAGL,eAAC,EAAD,WACE,eAAC,IAAD,WAAOqC,EAAgB,IAAK,oBAA5B,OACA,cAACX,EAAD,wBAAeK,EAAIxC,KAAnB,iBAGJ,eAACsC,EAAD,WACE,cAAC,IAAD,CAAQuB,WAAS,EAACC,QAAQ,YAAYC,QAASrB,EAA/C,SACGI,EAAgB,IAAK,YAExB,cAAC,IAAD,CAAQe,WAAS,EAACE,QAASV,EAAeW,UAAWlK,GAAW6I,GAAaQ,GAAgB,EAA7F,SACGL,EAAgB,IAAK,oB,gVCvEhC,IAAMX,EAAQ9E,YAAO+E,IAAP/E,CAAH,KAILgF,EAAehF,IAAOC,IAAV,KAIZgF,EAAUjF,IAAOC,IAAV,KA+EE2G,EAzEmC,SAAC,GAA6C,IAA3CzB,EAA0C,EAA1CA,IAAK0B,EAAqC,EAArCA,SAAUzB,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UAAgB,EAC3DnK,oBAAS,GADkD,mBACtFoK,EADsF,KAC3EC,EAD2E,OAEnErK,mBAAS,MAF0D,mBAEtFkI,EAFsF,KAE/EoC,EAF+E,OAG7DtK,oBAAS,GAHoD,mBAGtF4L,EAHsF,KAG5EC,EAH4E,KAIvFtB,EAAkBC,cAChBjJ,EAAYD,cAAZC,QACFkJ,EAAwBC,YAAqBlD,KAE7CsD,EAAa,uCAAG,8BAAA1K,EAAA,oFAEAuL,EAFA,GAEXjD,EAFW,cAIZ+B,EAAsBhK,QACzBqL,QAAQpD,GACRsC,KAAK,CAAEC,KAAM1J,IACb2J,GAAG,WAAW,WACbb,GAAa,MAEda,GAAG,WAAW,WACbf,IACAD,OAEDgB,GAAG,SAAS,WACXjD,QAAQC,MAAMA,GACdoC,EAAS,sBACTD,GAAa,MAjBC,sDAoBlBpC,QAAQC,MAAM,sBAAd,MApBkB,wDAAH,qDAwBnB,OACE,eAAC,IAAD,CAAOiD,MAAOZ,EAAgB,IAAK,gBAAiBJ,UAAWA,EAA/D,UACE,eAAC,EAAD,WACGjC,GACC,cAAC,IAAD,CAAMkD,MAAM,UAAUC,GAAG,MAAzB,SACGnD,IAGL,eAAC,EAAD,WACE,eAAC,IAAD,WAAOqC,EAAgB,IAAK,YAA5B,OACA,cAAC,EAAD,wBAAeN,EAAIxC,KAAnB,cAEF,eAAC,EAAD,WACE,eAAC,IAAD,WAAO8C,EAAgB,IAAK,oBAA5B,OACA,cAAC,EAAD,4BAGJ,eAAC,EAAD,WACE,cAAC,IAAD,CAAMa,MAAM,UAAZ,SACGb,EAAgB,IAAK,qFAExB,cAAC,IAAD,CAAMa,MAAM,UAAZ,SAAuBb,EAAgB,IAAK,uDAE9C,eAAC,EAAD,CAAcwB,MAAO,CAAEC,WAAY,SAAUC,QAAS,eAAtD,UACE,cAAC,IAAD,CAAUC,QAASN,EAAUO,MAAM,KAAKC,SAAU,kBAAMP,GAAaD,MACrE,cAAC,IAAD,CAAMS,GAAG,MAAMb,QAAS,kBAAMK,GAAaD,IAAWG,MAAO,CAAEO,OAAQ,WAAvE,SACG/B,EAAgB,IAAK,qBAG1B,eAAC,EAAD,WACE,cAAC,IAAD,CAAQe,WAAS,EAACC,QAAQ,YAAYC,QAASrB,EAA/C,SACGI,EAAgB,IAAK,YAExB,cAAC,IAAD,CAAQe,WAAS,EAACE,QAASV,EAAeW,UAAWlK,GAAW6I,IAAcwB,EAA9E,SACGrB,EAAgB,IAAK,oB,kgBC/EhC,IAAMX,GAAQ9E,YAAO+E,IAAP/E,CAAH,MAILgF,GAAehF,IAAOC,IAAV,MAIZgF,GAAUjF,IAAOC,IAAV,MAMPwH,GAAQzH,IAAO0H,MAAV,MACA,qBAAGvH,MAAkBC,OAAOuH,QAmFxBC,GA7E2C,SAAC,GAA6C,IAA3CzC,EAA0C,EAA1CA,IAAK0B,EAAqC,EAArCA,SAAUzB,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UAAgB,EACnEnK,oBAAS,GAD0D,mBAC9FoK,EAD8F,KACnFC,EADmF,OAE3ErK,mBAAS,IAFkE,mBAE9FmD,EAF8F,KAEvFwJ,EAFuF,OAG3E3M,mBAAS,MAHkE,mBAG9FkI,EAH8F,KAGvFoC,EAHuF,KAI/FC,EAAkBC,cAChBjJ,EAAYD,cAAZC,QACF6G,EAAyBwE,YAAkB1G,KAE3C4E,EAAa,uCAAG,sBAAA1K,EAAA,kEAEKyM,KAAKC,MAAMC,UAAU5J,GAF1B,gBAKhBmH,EAASC,EAAgB,IAAK,wCALd,sCAOVnC,EAAuB3H,QAC1BuM,aAAazL,EAAS4B,EAAOwI,EAAS,IACtCX,KAAK,CAAEC,KAAM1J,IACb2J,GAAG,WAAW,WACbb,GAAa,MAEda,GAAG,WAAW,WACbf,IACAD,OAEDgB,GAAG,SAAS,WACXjD,QAAQC,MAAMA,GACdoC,EAAS,0BACTD,GAAa,MApBD,yDAwBlBpC,QAAQC,MAAM,0BAAd,MAxBkB,0DAAH,qDAiCnB,OACE,eAAC,IAAD,CAAOiD,MAAOZ,EAAgB,IAAK,gBAAiBJ,UAAWA,EAA/D,UACE,eAAC,GAAD,WACGjC,GACC,cAAC,IAAD,CAAMkD,MAAM,UAAUC,GAAG,MAAzB,SACGnD,IAGL,eAAC,EAAD,WACE,eAAC,IAAD,WAAOqC,EAAgB,IAAK,gBAA5B,OACA,cAAC,GAAD,wBAAeN,EAAIxC,KAAnB,cAEF,eAAC8E,GAAD,CAAOU,QAAQ,kBAAf,UAAkC1C,EAAgB,IAAK,qBAAvD,OACA,cAAC,IAAD,CACE2C,GAAG,kBACHzF,KAAK,UACL0F,KAAK,OACLC,YAAa7C,EAAgB,IAAK,iBAClCpH,MAAOA,EACPiJ,SAxBa,SAACiB,GAA8C,IACnDC,EAAeD,EAAIzH,OAA1BzC,MACRwJ,EAASW,IAuBHC,UAAWrF,EACXuD,SAAUrB,OAGd,eAAC,GAAD,WACE,cAAC,IAAD,CAAQkB,WAAS,EAACC,QAAQ,YAAYC,QAASrB,EAA/C,SACGI,EAAgB,IAAK,YAExB,cAAC,IAAD,CAAQe,WAAS,EAACE,QAASV,EAAeW,UAAWlK,GAAW6I,IAAcjH,EAA9E,SACGoH,EAAgB,IAAK,oB,2hBCjFhC,IAAMiD,GAAS1I,YAAOD,EAAPC,CAAH,MAIN2I,GAAgB3I,YAAO4I,KAAQC,MAAM,CAAEpC,QAAS,OAAQD,WAAW,GAAnDxG,CAAH,MAab8I,GAAY9I,IAAOC,IAAV,MA8HA8I,IA1HD/I,YAAO+E,IAAP/E,CAAH,MAI6B,SAAC,GAAa,IAAXmF,EAAU,EAAVA,IAAU,EACzBjK,mBAAS,CACjCoK,WAAW,EACX0D,QAAQ,EACRC,WAAY,EACZC,eAAgB,IALiC,mBAC5C9G,EAD4C,KACrCC,EADqC,KAO7CoD,EAAkBC,cAP2B,EAiB/C3I,qBAAWsE,GARbM,EATiD,EASjDA,cACAC,EAViD,EAUjDA,SACAC,EAXiD,EAWjDA,WACA6C,EAZiD,EAYjDA,WACAzC,EAbiD,EAajDA,uBACAC,EAdiD,EAcjDA,yBACA0C,EAfiD,EAejDA,YACAC,EAhBiD,EAgBjDA,aAEIsE,EAAiBvH,IAAaC,EAC5BiC,EAA4DqB,EAA5DrB,QAASnB,EAAmDwC,EAAnDxC,KAAM/B,EAA6CuE,EAA7CvE,aAAcwI,EAA+BjE,EAA/BiE,cAAeC,EAAgBlE,EAAhBkE,YAC9CxC,EAAWjC,EAAYd,GACvBwF,EAAoBpH,EAA2BD,EAC/CsH,EAAgB1C,GAAYA,EAAS1I,OAAS,EAC9CqL,EAAOpH,EAAM4G,OAASS,IAAgBC,IAEtCC,EAAeC,sBAAW,sBAAC,kCAAAtO,EAAA,6DAC/B+G,GAAS,SAACY,GAAD,mBAAC,eAAoBA,GAArB,IAAgCqC,WAAW,OADrB,WAGTtE,IAAZrF,EAHqB,EAGrBA,QAHqB,SAIJA,EAAQsN,WAAWnF,GAASlI,OAJxB,cAIvBqN,EAJuB,gBAKAtN,EAAQuN,eAAepF,GAASlI,OALhC,OAKvBsN,EALuB,OAO7B7G,GAAS,SAACY,GAAD,mBAAC,eACLA,GADI,IAEPqC,WAAW,EACXuE,eAAe,EACfZ,WAAYlF,SAASkF,EAAY,IACjCC,eAAgBnF,SAASmF,EAAgB,SAZd,kDAe7B/F,QAAQC,MAAR,MAf6B,0DAiB9B,CAACU,IAEEgG,EAAW,uCAAG,sBAAAxO,EAAA,0DACd8G,EAAM4G,OADQ,gBAEhB3G,GAAS,SAACY,GAAD,mBAAC,eAAoBA,GAArB,IAAgC+F,QAAS/F,EAAU+F,YAF5C,gDAKRW,IALQ,uDAOdxG,QAAQC,MAAR,MAPc,yBASdf,GAAS,SAACY,GAAD,mBAAC,eAAoBA,GAArB,IAAgC+F,QAAS/F,EAAU+F,YAT9C,4EAAH,qDAcXe,EAAgB,WACpBJ,IACA9E,KA5DiD,EA+DrBmF,YAAS,cAAC,EAAD,CAAe7E,IAAKA,EAAKC,UAAW2E,KAApEE,EA/D4C,sBAgEtBD,YAAS,cAAC,EAAD,CAAc7E,IAAKA,EAAK0B,SAAUA,EAAUzB,UAAW2E,KAAtFG,EAhE4C,sBAiElBF,YAC/B,cAAC,GAAD,CAAkB7E,IAAKA,EAAK0B,SAAUA,EAAUzB,UAAW2E,KADtDI,EAjE4C,oBAqEnD,OACE,eAAC,IAAD,CAAMC,SAAUb,EAAhB,UACE,cAAC,EAAD,CAAO9I,IAAG,uBAAkBG,GAAgBF,IAAKiC,EAAMhC,aAAc4I,EAAgBH,EAAgB,OACrG,eAAC,IAAD,WACE,eAACV,GAAD,WACE,cAAC,IAAD,UAAU/F,IACThB,GAAiBwH,GAChB,cAAC,IAAD,CAAKkB,SAAO,EAAC5D,QAAQ,UAArB,SACGhB,EAAgB,IAAK,eAGzB9D,GAAiBkF,GAChB,cAAC,IAAD,CAAKwD,SAAO,EAAC5D,QAAQ,YAArB,SACGhB,EAAgB,IAAK,kBAI3B9D,GAAiB4H,GAChB,cAAC,IAAD,CAAQ/C,WAAS,EAACC,QAAQ,YAAY6D,GAAG,OAAO5D,QAASyD,EAAzD,SACG1E,EAAgB,IAAK,cAGzB9D,GAAiBwH,GAAkBG,GAClC,cAAC,IAAD,CAAQ9C,WAAS,EAACE,QAASuD,EAAqBK,GAAG,OAAnD,SACG7E,EAAgB,IAAK,oBAGzB9D,GAAiB+C,GAAc6E,GAC9B,cAAC,IAAD,CAAQ9C,QAAQ,SAASD,WAAS,EAACE,QAASwD,EAAoBI,GAAG,OAAnE,SACG7E,EAAgB,IAAK,0BAI5B,eAAC,IAAD,CAAY8E,EAAE,IAAd,UACE,cAAC5B,GAAD,CAAe6B,QAAS,cAAChB,EAAD,CAAMiB,MAAM,OAAOnE,MAAM,YAAcI,QAASoD,EAAxE,SACG1H,EAAMkD,UAAYG,EAAgB,IAAK,cAAgBA,EAAgB,IAAK,aAE9ErD,EAAM4G,QACL,cAACF,GAAD,UACE,cAAC,IAAD,CAAM4B,GAAG,IAAIpE,MAAM,aAAaC,GAAG,OAAOU,MAAO,CAAE0D,UAAW,UAA9D,SACGtB,c,qNC/Jf,IAaeuB,GAbC5K,YAAO6K,IAAP7K,CAAH,MAOP,qBAAGG,MAAkB2K,aAAaC,MCQzBC,GAZC,WACd,OACE,cAAC,GAAD,UACGC,IAAQC,IAAM,aAAaC,KAAI,SAAChG,GAAD,OAC9B,8BACE,cAAC,GAAD,CAASA,IAAKA,KADNA,EAAIxC,Y,2JCCtB,IAAMyI,GAAapL,IAAOC,IAAV,MACa,qBAAGE,MAAkBC,OAAOiL,cAiC1CC,UA5BH,WACV,IAAM7F,EAAkBC,cAExB,OACE,cAAC,EAAD,UACE,eAAC6F,EAAA,EAAD,WACE,eAACH,GAAD,WACE,cAAC,IAAD,CAASV,GAAG,KAAKc,KAAK,MAAMlF,MAAM,WAAWC,GAAG,OAAhD,kBAGA,eAAC,IAAD,CAASmE,GAAG,KAAKc,KAAK,KAAKlF,MAAM,WAAjC,UACGb,EAAgB,IAAK,iDAC/B,uBACA,uBACA,cAAC,IAAD,CACW2C,GAAG,WACZvH,KAAK,gCAFP,SAIA,mBAAGA,KAAK,gCAAR,0CAIK,cAAC,GAAD","file":"static/js/12.ca7e3329.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport { getContract } from 'utils/web3'\r\nimport { getTokenBalance } from 'utils/erc20'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account && ethereum) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, ethereum, tokenAddress, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(bal))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport default useTokenBalance\r\n","import { useContext } from 'react'\r\nimport { BlockContext } from 'contexts/BlockContext'\r\n\r\nconst useBlock = () => {\r\n  const block: number = useContext(BlockContext)\r\n  return block\r\n}\r\n\r\nexport default useBlock\r\n","var baseOrderBy = require('./_baseOrderBy'),\n    isArray = require('./isArray');\n\n/**\n * This method is like `_.sortBy` except that it allows specifying the sort\n * orders of the iteratees to sort by. If `orders` is unspecified, all values\n * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n * descending or \"asc\" for ascending sort order of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @param {string[]} [orders] The sort orders of `iteratees`.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 34 },\n *   { 'user': 'fred',   'age': 40 },\n *   { 'user': 'barney', 'age': 36 }\n * ];\n *\n * // Sort by `user` in ascending order and by `age` in descending order.\n * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n */\nfunction orderBy(collection, iteratees, orders, guard) {\n  if (collection == null) {\n    return [];\n  }\n  if (!isArray(iteratees)) {\n    iteratees = iteratees == null ? [] : [iteratees];\n  }\n  orders = guard ? undefined : orders;\n  if (!isArray(orders)) {\n    orders = orders == null ? [] : [orders];\n  }\n  return baseOrderBy(collection, iteratees, orders);\n}\n\nmodule.exports = orderBy;\n","var arrayMap = require('./_arrayMap'),\n    baseGet = require('./_baseGet'),\n    baseIteratee = require('./_baseIteratee'),\n    baseMap = require('./_baseMap'),\n    baseSortBy = require('./_baseSortBy'),\n    baseUnary = require('./_baseUnary'),\n    compareMultiple = require('./_compareMultiple'),\n    identity = require('./identity'),\n    isArray = require('./isArray');\n\n/**\n * The base implementation of `_.orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n */\nfunction baseOrderBy(collection, iteratees, orders) {\n  if (iteratees.length) {\n    iteratees = arrayMap(iteratees, function(iteratee) {\n      if (isArray(iteratee)) {\n        return function(value) {\n          return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);\n        }\n      }\n      return iteratee;\n    });\n  } else {\n    iteratees = [identity];\n  }\n\n  var index = -1;\n  iteratees = arrayMap(iteratees, baseUnary(baseIteratee));\n\n  var result = baseMap(collection, function(value, key, collection) {\n    var criteria = arrayMap(iteratees, function(iteratee) {\n      return iteratee(value);\n    });\n    return { 'criteria': criteria, 'index': ++index, 'value': value };\n  });\n\n  return baseSortBy(result, function(object, other) {\n    return compareMultiple(object, other, orders);\n  });\n}\n\nmodule.exports = baseOrderBy;\n","var baseEach = require('./_baseEach'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nmodule.exports = baseMap;\n","/**\n * The base implementation of `_.sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their corresponding\n * values.\n *\n * @private\n * @param {Array} array The array to sort.\n * @param {Function} comparer The function to define sort order.\n * @returns {Array} Returns `array`.\n */\nfunction baseSortBy(array, comparer) {\n  var length = array.length;\n\n  array.sort(comparer);\n  while (length--) {\n    array[length] = array[length].value;\n  }\n  return array;\n}\n\nmodule.exports = baseSortBy;\n","var compareAscending = require('./_compareAscending');\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\nmodule.exports = compareMultiple;\n","var isSymbol = require('./isSymbol');\n\n/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined,\n        valIsNull = value === null,\n        valIsReflexive = value === value,\n        valIsSymbol = isSymbol(value);\n\n    var othIsDefined = other !== undefined,\n        othIsNull = other === null,\n        othIsReflexive = other === other,\n        othIsSymbol = isSymbol(other);\n\n    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n        (valIsNull && othIsDefined && othIsReflexive) ||\n        (!valIsDefined && othIsReflexive) ||\n        !valIsReflexive) {\n      return 1;\n    }\n    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n        (othIsNull && valIsDefined && valIsReflexive) ||\n        (!othIsDefined && valIsReflexive) ||\n        !othIsReflexive) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\nmodule.exports = compareAscending;\n","import styled from 'styled-components'\r\n\r\nconst InfoRow = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`\r\n\r\nexport default InfoRow\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\ninterface ImageProps {\r\n  src: string\r\n  alt: string\r\n  originalLink?: string\r\n}\r\n\r\nconst Container = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  position: relative;\r\n  width: 100%;\r\n  overflow: hidden;\r\n  padding-bottom: 100%;\r\n`\r\n\r\nconst StyledImage = styled.img`\r\n  position: absolute;\r\n  width: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  transition: opacity 1s linear;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  border-radius: 32px 32px 0 0;\r\n`\r\n\r\nconst Image: React.FC<ImageProps> = ({ src, alt, originalLink }) => {\r\n  const previewImage = <StyledImage src={src} alt={alt} />\r\n\r\n  return (\r\n    <Container>\r\n      {originalLink ? (\r\n        <a href={originalLink} target=\"_blank\" rel=\"noreferrer noopener\">\r\n          {previewImage}\r\n        </a>\r\n      ) : (\r\n        previewImage\r\n      )}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Image\r\n","import { AbiItem } from 'web3-utils'\r\nimport { getContract } from 'utils/web3'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\r\nimport pancakeRabbits from 'config/abi/pancakeRabbits.json'\r\nimport { RABBIT_MINTING_FARM_ADDRESS, PANCAKE_RABBITS_ADDRESS } from 'config/constants/nfts'\r\n\r\n// TODO: Figure out how to add current account to contracts to write methods can be used\r\n\r\nexport const getRabbitMintingContract = (contractOptions?: ContractOptions) => {\r\n  const rabbitMintingFarmAbi = (rabbitmintingfarm as unknown) as AbiItem\r\n  return getContract(rabbitMintingFarmAbi, RABBIT_MINTING_FARM_ADDRESS, contractOptions)\r\n}\r\n\r\nexport const getPancakeRabbitContract = (contractOptions?: ContractOptions) => {\r\n  const pancakeRabbitsAbi = (pancakeRabbits as unknown) as AbiItem\r\n  return getContract(pancakeRabbitsAbi, PANCAKE_RABBITS_ADDRESS, contractOptions)\r\n}\r\n\r\nexport default getRabbitMintingContract\r\n","import React, { createContext, ReactNode, useEffect, useRef, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useBlock from 'hooks/useBlock'\r\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\r\nimport { RABBIT_MINTING_FARM_ADDRESS } from 'config/constants/nfts'\r\nimport multicall from 'utils/multicall'\r\nimport { getPancakeRabbitContract } from '../utils/contracts'\r\n\r\ninterface NftProviderProps {\r\n  children: ReactNode\r\n}\r\n\r\ntype BunnyMap = {\r\n  [key: number]: number[]\r\n}\r\n\r\ntype State = {\r\n  isInitialized: boolean\r\n  canClaim: boolean\r\n  hasClaimed: boolean\r\n  countBunniesBurnt: number\r\n  endBlockNumber: number\r\n  startBlockNumber: number\r\n  totalSupplyDistributed: number\r\n  currentDistributedSupply: number\r\n  balanceOf: number\r\n  bunnyMap: BunnyMap\r\n}\r\n\r\ntype Context = {\r\n  canBurnNft: boolean\r\n  getTokenIds: (bunnyId: number) => number[]\r\n  reInitialize: () => void\r\n} & State\r\n\r\nexport const NftProviderContext = createContext<Context | null>(null)\r\n\r\nconst NftProvider: React.FC<NftProviderProps> = ({ children }) => {\r\n  const isMounted = useRef(true)\r\n  const [state, setState] = useState<State>({\r\n    isInitialized: false,\r\n    canClaim: false,\r\n    hasClaimed: false,\r\n    countBunniesBurnt: 0,\r\n    startBlockNumber: 0,\r\n    endBlockNumber: 0,\r\n    totalSupplyDistributed: 0,\r\n    currentDistributedSupply: 0,\r\n    balanceOf: 0,\r\n    bunnyMap: {},\r\n  })\r\n  const { account } = useWallet()\r\n  const currentBlock = useBlock()\r\n\r\n  const { isInitialized } = state\r\n\r\n  // Static data\r\n  useEffect(() => {\r\n    const fetchContractData = async () => {\r\n      try {\r\n        const [\r\n          startBlockNumberArr,\r\n          endBlockNumberArr,\r\n          countBunniesBurntArr,\r\n          totalSupplyDistributedArr,\r\n          currentDistributedSupplyArr,\r\n        ] = await multicall(rabbitmintingfarm, [\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'startBlockNumber' },\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'endBlockNumber' },\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'countBunniesBurnt' },\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'totalSupplyDistributed' },\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'currentDistributedSupply' },\r\n        ])\r\n\r\n        // TODO: Figure out why these are coming back as arrays\r\n        const [startBlockNumber]: [BigNumber] = startBlockNumberArr\r\n        const [endBlockNumber]: [BigNumber] = endBlockNumberArr\r\n        const [countBunniesBurnt]: [BigNumber] = countBunniesBurntArr\r\n        const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\r\n        const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          countBunniesBurnt: countBunniesBurnt.toNumber(),\r\n          startBlockNumber: startBlockNumber.toNumber(),\r\n          endBlockNumber: endBlockNumber.toNumber(),\r\n          currentDistributedSupply: currentDistributedSupply.toNumber(),\r\n          totalSupplyDistributed: totalSupplyDistributed.toNumber(),\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    fetchContractData()\r\n  }, [isInitialized, setState])\r\n\r\n  // Data from the contract that needs an account\r\n  useEffect(() => {\r\n    const fetchContractData = async () => {\r\n      try {\r\n        const pancakeRabbitsContract = getPancakeRabbitContract()\r\n        const [canClaimArr, hasClaimedArr] = await multicall(rabbitmintingfarm, [\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'canClaim', params: [account] },\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'hasClaimed', params: [account] },\r\n        ])\r\n        const balanceOf = await pancakeRabbitsContract.methods.balanceOf(account).call()\r\n        const [canClaim]: [boolean] = canClaimArr\r\n        const [hasClaimed]: [boolean] = hasClaimedArr\r\n\r\n        let bunnyMap: BunnyMap = {}\r\n\r\n        // If the \"balanceOf\" is greater than 0 then retrieve the tokenIds\r\n        // owned by the wallet, then the bunnyId's associated with the tokenIds\r\n        if (balanceOf > 0) {\r\n          const getTokenIdAndBunnyId = async (index: number) => {\r\n            try {\r\n              const tokenId = await pancakeRabbitsContract.methods.tokenOfOwnerByIndex(account, index).call()\r\n              const bunnyId = await pancakeRabbitsContract.methods.getBunnyId(tokenId).call()\r\n\r\n              return [parseInt(bunnyId, 10), parseInt(tokenId, 10)]\r\n            } catch (error) {\r\n              return null\r\n            }\r\n          }\r\n\r\n          const tokenIdPromises = []\r\n\r\n          for (let i = 0; i < balanceOf; i++) {\r\n            tokenIdPromises.push(getTokenIdAndBunnyId(i))\r\n          }\r\n\r\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\r\n\r\n          // While improbable a wallet can own more than one of the same bunny so the format is:\r\n          // { [bunnyId]: [array of tokenIds] }\r\n          bunnyMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\r\n            if (!association) {\r\n              return accum\r\n            }\r\n\r\n            const [bunnyId, tokenId] = association\r\n\r\n            return {\r\n              ...accum,\r\n              [bunnyId]: accum[bunnyId] ? [...accum[bunnyId], tokenId] : [tokenId],\r\n            }\r\n          }, {})\r\n        }\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          canClaim,\r\n          hasClaimed,\r\n          balanceOf,\r\n          bunnyMap,\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchContractData()\r\n    }\r\n  }, [isInitialized, account, setState])\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      isMounted.current = false\r\n    }\r\n  }, [isMounted])\r\n\r\n  const canBurnNft = currentBlock <= state.endBlockNumber\r\n  const getTokenIds = (bunnyId: number) => state.bunnyMap[bunnyId]\r\n\r\n  /**\r\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\r\n   * For example when a transaction has been completed\r\n   */\r\n  const reInitialize = () => {\r\n    // Only attempt to re-initialize if the component is still mounted\r\n    // Transactions can take awhile so it is likely some users will navigate to another page\r\n    // before the transaction is finished\r\n    if (isMounted.current) {\r\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <NftProviderContext.Provider value={{ ...state, canBurnNft, getTokenIds, reInitialize }}>\r\n      {children}\r\n    </NftProviderContext.Provider>\r\n  )\r\n}\r\n\r\nexport default NftProvider\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Button, Modal, Text } from '@pancakeswap-libs/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { RABBIT_MINTING_FARM_ADDRESS } from 'config/constants/nfts'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { Nft } from 'config/constants/types'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useRabbitMintingFarm } from 'hooks/useContract'\r\nimport InfoRow from './InfoRow'\r\n\r\ninterface ClaimNftModalProps {\r\n  nft: Nft\r\n  onSuccess: () => any\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst ModalContent = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onDismiss }) => {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [error, setError] = useState(null)\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n  const rabbitMintingContract = useRabbitMintingFarm(RABBIT_MINTING_FARM_ADDRESS)\r\n  const cakeBalance = useTokenBalance(getCakeAddress())\r\n  const cakeInWallet = getBalanceNumber(cakeBalance)\r\n\r\n  const handleConfirm = async () => {\r\n    try {\r\n      await rabbitMintingContract.methods\r\n        .mintNFT(nft.bunnyId)\r\n        .send({ from: account })\r\n        .on('sending', () => {\r\n          setIsLoading(true)\r\n        })\r\n        .on('receipt', () => {\r\n          onDismiss()\r\n          onSuccess()\r\n        })\r\n        .on('error', () => {\r\n          console.error(error)\r\n          setError('Unable to claim NFT')\r\n          setIsLoading(false)\r\n        })\r\n    } catch (err) {\r\n      console.error('Unable to mint NFT:', err)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (cakeInWallet === 0) {\r\n      setError('You must have a CAKE balance greater than zero to claim NFT')\r\n    }\r\n  }, [cakeInWallet, setError])\r\n\r\n  return (\r\n    <Modal title={TranslateString(999, 'Claim NFT')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        {error && (\r\n          <Text color=\"failure\" mb=\"8px\">\r\n            {error}\r\n          </Text>\r\n        )}\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\r\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\r\n        </InfoRow>\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || cakeInWallet <= 0}>\r\n          {TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ClaimNftModal\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Button, Checkbox, Modal, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { Nft } from 'config/constants/types'\r\nimport { RABBIT_MINTING_FARM_ADDRESS } from 'config/constants/nfts'\r\nimport { useRabbitMintingFarm } from 'hooks/useContract'\r\nimport InfoRow from './InfoRow'\r\n\r\ninterface BurnNftModalProps {\r\n  nft: Nft\r\n  tokenIds: number[]\r\n  onSuccess: () => any\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst ModalContent = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst BurnNftModal: React.FC<BurnNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [error, setError] = useState(null)\r\n  const [accepted, setAccepted] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n  const rabbitMintingContract = useRabbitMintingFarm(RABBIT_MINTING_FARM_ADDRESS)\r\n\r\n  const handleConfirm = async () => {\r\n    try {\r\n      const [tokenId] = tokenIds\r\n\r\n      await rabbitMintingContract.methods\r\n        .burnNFT(tokenId)\r\n        .send({ from: account })\r\n        .on('sending', () => {\r\n          setIsLoading(true)\r\n        })\r\n        .on('receipt', () => {\r\n          onDismiss()\r\n          onSuccess()\r\n        })\r\n        .on('error', () => {\r\n          console.error(error)\r\n          setError('Unable to burn NFT')\r\n          setIsLoading(false)\r\n        })\r\n    } catch (err) {\r\n      console.error('Unable to burn NFT:', err)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal title={TranslateString(999, 'Trade in NFT')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        {error && (\r\n          <Text color=\"failure\" mb=\"8px\">\r\n            {error}\r\n          </Text>\r\n        )}\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'Trade in')}:</Text>\r\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\r\n        </InfoRow>\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\r\n          <Value>10 CAKE</Value>\r\n        </InfoRow>\r\n      </ModalContent>\r\n      <ModalContent>\r\n        <Text color=\"failure\">\r\n          {TranslateString(999, 'When you trade in this NFT to receive CAKE, you will lose access to it forever!')}\r\n        </Text>\r\n        <Text color=\"failure\">{TranslateString(999, 'It will be burned and removed from circulation')}</Text>\r\n      </ModalContent>\r\n      <ModalContent style={{ alignItems: 'center', display: 'inline-flex' }}>\r\n        <Checkbox checked={accepted} scale=\"sm\" onChange={() => setAccepted(!accepted)} />\r\n        <Text ml=\"8px\" onClick={() => setAccepted(!accepted)} style={{ cursor: 'pointer' }}>\r\n          {TranslateString(999, 'I understand')}\r\n        </Text>\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !accepted}>\r\n          {TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default BurnNftModal\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport Web3 from 'web3'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Button, Input, Modal, Text } from '@pancakeswap-libs/uikit'\r\nimport { PANCAKE_RABBITS_ADDRESS } from 'config/constants/nfts'\r\nimport { Nft } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { usePancakeRabbits } from 'hooks/useContract'\r\nimport InfoRow from './InfoRow'\r\n\r\ninterface TransferNftModalProps {\r\n  nft: Nft\r\n  tokenIds: number[]\r\n  onSuccess: () => any\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst ModalContent = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst Label = styled.label`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: block;\r\n  margin-bottom: 8px;\r\n  margin-top: 24px;\r\n`\r\n\r\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [value, setValue] = useState('')\r\n  const [error, setError] = useState(null)\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n  const pancakeRabbitsContract = usePancakeRabbits(PANCAKE_RABBITS_ADDRESS)\r\n\r\n  const handleConfirm = async () => {\r\n    try {\r\n      const isValidAddress = Web3.utils.isAddress(value)\r\n\r\n      if (!isValidAddress) {\r\n        setError(TranslateString(999, 'Please enter a valid wallet address'))\r\n      } else {\r\n        await pancakeRabbitsContract.methods\r\n          .transferFrom(account, value, tokenIds[0])\r\n          .send({ from: account })\r\n          .on('sending', () => {\r\n            setIsLoading(true)\r\n          })\r\n          .on('receipt', () => {\r\n            onDismiss()\r\n            onSuccess()\r\n          })\r\n          .on('error', () => {\r\n            console.error(error)\r\n            setError('Unable to transfer NFT')\r\n            setIsLoading(false)\r\n          })\r\n      }\r\n    } catch (err) {\r\n      console.error('Unable to transfer NFT:', err)\r\n    }\r\n  }\r\n\r\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value: inputValue } = evt.target\r\n    setValue(inputValue)\r\n  }\r\n\r\n  return (\r\n    <Modal title={TranslateString(999, 'Transfer NFT')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        {error && (\r\n          <Text color=\"failure\" mb=\"8px\">\r\n            {error}\r\n          </Text>\r\n        )}\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'Transferring')}:</Text>\r\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\r\n        </InfoRow>\r\n        <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Receiving address')}:</Label>\r\n        <Input\r\n          id=\"transferAddress\"\r\n          name=\"address\"\r\n          type=\"text\"\r\n          placeholder={TranslateString(999, 'Paste address')}\r\n          value={value}\r\n          onChange={handleChange}\r\n          isWarning={error}\r\n          disabled={isLoading}\r\n        />\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !value}>\r\n          {TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default TransferNftModal\r\n","import React, { useState, useContext, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Heading,\r\n  Tag,\r\n  Button,\r\n  ChevronUpIcon,\r\n  ChevronDownIcon,\r\n  Text,\r\n  CardFooter,\r\n  useModal,\r\n} from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { Nft } from 'config/constants/types'\r\nimport InfoRow from '../InfoRow'\r\nimport Image from '../Image'\r\nimport { NftProviderContext } from '../../contexts/NftProvider'\r\nimport { getPancakeRabbitContract } from '../../utils/contracts'\r\nimport ClaimNftModal from '../ClaimNftModal'\r\nimport BurnNftModal from '../BurnNftModal'\r\nimport TransferNftModal from '../TransferNftModal'\r\n\r\ninterface NftCardProps {\r\n  nft: Nft\r\n}\r\n\r\nconst Header = styled(InfoRow)`\r\n  min-height: 28px;\r\n`\r\n\r\nconst DetailsButton = styled(Button).attrs({ variant: 'text', fullWidth: true })`\r\n  height: auto;\r\n  padding: 16px 24px;\r\n\r\n  &:hover:not(:disabled):not(:active) {\r\n    background-color: transparent;\r\n  }\r\n\r\n  &:focus:not(:active) {\r\n    box-shadow: none;\r\n  }\r\n`\r\n\r\nconst InfoBlock = styled.div`\r\n  padding: 0 24px 24px;\r\n`\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst NftCard: React.FC<NftCardProps> = ({ nft }) => {\r\n  const [state, setState] = useState({\r\n    isLoading: false,\r\n    isOpen: false,\r\n    bunnyCount: 0,\r\n    bunnyBurnCount: 0,\r\n  })\r\n  const TranslateString = useI18n()\r\n  const {\r\n    isInitialized,\r\n    canClaim,\r\n    hasClaimed,\r\n    canBurnNft,\r\n    totalSupplyDistributed,\r\n    currentDistributedSupply,\r\n    getTokenIds,\r\n    reInitialize,\r\n  } = useContext(NftProviderContext)\r\n  const walletCanClaim = canClaim && !hasClaimed\r\n  const { bunnyId, name, previewImage, originalImage, description } = nft\r\n  const tokenIds = getTokenIds(bunnyId)\r\n  const isSupplyAvailable = currentDistributedSupply < totalSupplyDistributed\r\n  const walletOwnsNft = tokenIds && tokenIds.length > 0\r\n  const Icon = state.isOpen ? ChevronUpIcon : ChevronDownIcon\r\n\r\n  const fetchDetails = useCallback(async () => {\r\n    setState((prevState) => ({ ...prevState, isLoading: true }))\r\n    try {\r\n      const { methods } = getPancakeRabbitContract()\r\n      const bunnyCount = await methods.bunnyCount(bunnyId).call()\r\n      const bunnyBurnCount = await methods.bunnyBurnCount(bunnyId).call()\r\n\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        isLoading: false,\r\n        isDataFetched: true,\r\n        bunnyCount: parseInt(bunnyCount, 10),\r\n        bunnyBurnCount: parseInt(bunnyBurnCount, 10),\r\n      }))\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n  }, [bunnyId])\r\n\r\n  const handleClick = async () => {\r\n    if (state.isOpen) {\r\n      setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\r\n    } else {\r\n      try {\r\n        await fetchDetails()\r\n      } catch (error) {\r\n        console.error(error)\r\n      } finally {\r\n        setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleSuccess = () => {\r\n    fetchDetails()\r\n    reInitialize()\r\n  }\r\n\r\n  const [onPresentClaimModal] = useModal(<ClaimNftModal nft={nft} onSuccess={handleSuccess} />)\r\n  const [onPresentBurnModal] = useModal(<BurnNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />)\r\n  const [onPresentTransferModal] = useModal(\r\n    <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\r\n  )\r\n\r\n  return (\r\n    <Card isActive={walletOwnsNft}>\r\n      <Image src={`/images/nfts/${previewImage}`} alt={name} originalLink={walletOwnsNft ? originalImage : null} />\r\n      <CardBody>\r\n        <Header>\r\n          <Heading>{name}</Heading>\r\n          {isInitialized && walletCanClaim && (\r\n            <Tag outline variant=\"success\">\r\n              {TranslateString(526, 'Available')}\r\n            </Tag>\r\n          )}\r\n          {isInitialized && tokenIds && (\r\n            <Tag outline variant=\"secondary\">\r\n              {TranslateString(999, 'In Wallet')}\r\n            </Tag>\r\n          )}\r\n        </Header>\r\n        {isInitialized && walletOwnsNft && (\r\n          <Button fullWidth variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\r\n            {TranslateString(999, 'Transfer')}\r\n          </Button>\r\n        )}\r\n        {isInitialized && walletCanClaim && isSupplyAvailable && (\r\n          <Button fullWidth onClick={onPresentClaimModal} mt=\"24px\">\r\n            {TranslateString(999, 'Claim this NFT')}\r\n          </Button>\r\n        )}\r\n        {isInitialized && canBurnNft && walletOwnsNft && (\r\n          <Button variant=\"danger\" fullWidth onClick={onPresentBurnModal} mt=\"24px\">\r\n            {TranslateString(999, 'Trade in for CAKE')}\r\n          </Button>\r\n        )}\r\n      </CardBody>\r\n      <CardFooter p=\"0\">\r\n        <DetailsButton endIcon={<Icon width=\"24px\" color=\"primary\" />} onClick={handleClick}>\r\n          {state.isLoading ? TranslateString(999, 'Loading...') : TranslateString(999, 'Details')}\r\n        </DetailsButton>\r\n        {state.isOpen && (\r\n          <InfoBlock>\r\n            <Text as=\"p\" color=\"textSubtle\" mb=\"16px\" style={{ textAlign: 'center' }}>\r\n              {description}\r\n            </Text>\r\n          </InfoBlock>\r\n        )}\r\n      </CardFooter>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default NftCard\r\n","import styled from 'styled-components'\r\nimport { BaseLayout } from '@pancakeswap-libs/uikit'\r\n\r\nconst NftGrid = styled(BaseLayout)`\r\n  padding-bottom: 24px;\r\n  padding-top: 24px;\r\n\r\n  & > div {\r\n    grid-column: 2 / 6;\r\n\r\n    ${({ theme }) => theme.mediaQueries.sm} {\r\n      grid-column: span 4;\r\n    }\r\n  }\r\n`\r\n\r\nexport default NftGrid\r\n","import React from 'react'\r\nimport orderBy from 'lodash/orderBy'\r\nimport nfts from 'config/constants/nfts'\r\nimport NftCard from './NftCard'\r\nimport NftGrid from './NftGrid'\r\n\r\nconst NftList = () => {\r\n  return (\r\n    <NftGrid>\r\n      {orderBy(nfts, 'sortOrder').map((nft) => (\r\n        <div key={nft.name}>\r\n          <NftCard nft={nft} />\r\n        </div>\r\n      ))}\r\n    </NftGrid>\r\n  )\r\n}\r\n\r\nexport default NftList\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Button } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport HowItWorks from './components/HowItWorks'\r\nimport NftList from './components/NftList'\r\nimport NftProvider from './contexts/NftProvider'\r\nimport NftInfo from './components/NftInfo'\r\nimport ForwardButton from './components/ForwardButton'\r\n\r\nconst StyledHero = styled.div`\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.textSubtle};\r\n  margin-bottom: 24px;\r\n  padding-bottom: 32px;\r\n`\r\n\r\nconst Nft = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <NftProvider>\r\n      <Page>\r\n        <StyledHero>\r\n          <Heading as=\"h1\" size=\"xxl\" color=\"tertiary\" mb=\"24px\">\r\n            NFTs\r\n          </Heading>\r\n          <Heading as=\"h2\" size=\"lg\" color=\"tertiary\">\r\n            {TranslateString(999, 'LaikaPunks are ready to blast off into space!')}\r\n\t\t\t<br/>\r\n\t\t\t<br/>\r\n\t\t\t<Button\r\n              id=\"nft-link\"\r\n\t\t\t  href='https://nft.astroprotocol.com'\r\n            >\r\n\t\t\t<a href=\"https://nft.astroprotocol.com\">Check them out here!</a>\r\n            </Button>\r\n          </Heading>\r\n        </StyledHero>\r\n        <NftList />\r\n      </Page>\r\n    </NftProvider>\r\n  )\r\n}\r\n\r\nexport default Nft\r\n"],"sourceRoot":""}